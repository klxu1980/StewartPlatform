<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\fsmc_indep.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\fsmc_indep.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Sep 30 11:52:12 2022
<BR><P>
<H3>Maximum Stack Usage =       1032 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EXTI4_IRQHandler &rArr; RobotCtrl &rArr; CCtrlSystem::Control() &rArr; CCtrlSystem::JuneBugCtrl() &rArr; CJuneBugCtrl::Move() &rArr; CJuneBugCtrl::StateMoveXY() &rArr; CJuneBugCtrl::ScheduleXYMovement(float, float, float, float) &rArr; CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[cb]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[38]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[38]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[55]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[60]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[61]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4e]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2f]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">EXTI4_IRQHandler</a> from exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[56]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1f]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1d]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[24]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4f]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1c]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[57]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4a]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[59]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[22]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[62]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[28]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[58]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5c]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5d]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[51]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[54]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[53]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[52]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5a]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5b]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4b]">USART1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4c]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4d]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[50]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[68]">CCubicTrace::CCubicTrace()</a> from cubictrace.o(i._ZN11CCubicTraceC1Ev) referenced from junebugctrl.o(i._ZN12CJuneBugCtrlC1Ev)
 <LI><a href="#[68]">CCubicTrace::CCubicTrace()</a> from cubictrace.o(i._ZN11CCubicTraceC1Ev) referenced from motiontrack.o(i._ZN14CMotionTrackerC1Ev)
 <LI><a href="#[6d]">CLowPassFilter::Filter(double)</a> from motionsimu.o(i._ZN14CLowPassFilter6FilterEd) referenced from motionsimu.o(.constdata__ZTV14CLowPassFilter)
 <LI><a href="#[6c]">CLowPassFilter::SetParams(double)</a> from motionsimu.o(i._ZN14CLowPassFilter9SetParamsEd) referenced from motionsimu.o(.constdata__ZTV14CLowPassFilter)
 <LI><a href="#[6c]">CLowPassFilter::SetParams(double)</a> from motionsimu.o(i._ZN14CLowPassFilter9SetParamsEd) referenced from motionsimu.o(.constdata__ZTV15CHighPassFilter)
 <LI><a href="#[6e]">CHighPassFilter::Filter(double)</a> from motionsimu.o(i._ZN15CHighPassFilter6FilterEd) referenced from motionsimu.o(.constdata__ZTV15CHighPassFilter)
 <LI><a href="#[6b]">CHighPassFilter::CHighPassFilter()</a> from motionsimu.o(i._ZN15CHighPassFilterC1Ev) referenced from motionsimu.o(i._ZN16CMotionSimulatorC1Ev)
 <LI><a href="#[6a]">CFilterAcc2Angle::CFilterAcc2Angle()</a> from motionsimu.o(i._ZN16CFilterAcc2AngleC1Ev) referenced from motionsimu.o(i._ZN16CMotionSimulatorC1Ev)
 <LI><a href="#[67]">CFilterAcc2Motion::CFilterAcc2Motion()</a> from motionsimu.o(i._ZN17CFilterAcc2MotionC1Ev) referenced from stablectrl.o(i._ZN11CStableCtrlC1Ev)
 <LI><a href="#[67]">CFilterAcc2Motion::CFilterAcc2Motion()</a> from motionsimu.o(i._ZN17CFilterAcc2MotionC1Ev) referenced from motionsimu.o(i._ZN16CMotionSimulatorC1Ev)
 <LI><a href="#[69]">CFilterRSpd2Angle::CFilterRSpd2Angle()</a> from motionsimu.o(i._ZN17CFilterRSpd2AngleC1Ev) referenced from motionsimu.o(i._ZN16CMotionSimulatorC1Ev)
 <LI><a href="#[71]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[6f]">__sti___13_CtrlBoard_cpp_7278497b</a> from ctrlboard.o(i.__sti___13_CtrlBoard_cpp_7278497b) referenced from ctrlboard.o(.init_array)
 <LI><a href="#[70]">__sti___14_CtrlSystem_cpp_e608436e</a> from ctrlsystem.o(i.__sti___14_CtrlSystem_cpp_e608436e) referenced from ctrlsystem.o(.init_array)
 <LI><a href="#[66]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[65]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[64]">_sputc</a> from _sputc.o(.text) referenced from vsprintf.o(.text)
 <LI><a href="#[1a]">feed_dog</a> from wwdg.o(i.feed_dog) referenced 2 times from wwdg.o(.data)
 <LI><a href="#[10]">initialize</a> from fsmc.o(i.initialize) referenced 10 times from fsmc.o(.data)
 <LI><a href="#[13]">initialize_usart2</a> from usart.o(i.initialize_usart2) referenced 2 times from usart.o(.data)
 <LI><a href="#[16]">initialize_usart3</a> from usart.o(i.initialize_usart3) referenced 2 times from usart.o(.data)
 <LI><a href="#[15]">my_printf2</a> from usart.o(i.my_printf2) referenced 2 times from usart.o(.data)
 <LI><a href="#[18]">my_printf3</a> from usart.o(i.my_printf3) referenced 2 times from usart.o(.data)
 <LI><a href="#[14]">send_string_to_usart2</a> from usart.o(i.send_string_to_usart2) referenced 2 times from usart.o(.data)
 <LI><a href="#[17]">send_string_to_usart3</a> from usart.o(i.send_string_to_usart3) referenced 2 times from usart.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[71]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[73]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[75]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1db]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1dc]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1dd]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1de]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1df]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[76]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[bd]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[78]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[7a]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[7c]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[7d]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[7e]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1e0]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[80]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[82]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[83]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[84]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[86]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[88]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[8a]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[8b]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[8c]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[8e]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[1e1]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[90]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[92]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[94]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[96]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[1e2]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[a1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1e4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[98]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1f8]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1f9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1fa]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1fb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1fc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1fd]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1fe]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[74]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1ff]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[200]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[201]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[cc]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[202]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a9]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_printf3
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_printf2
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetAccCtrlParams(CMotionSimuParams&)
</UL>

<P><STRONG><a name="[ab]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[203]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::RotateAroundZ(double*, double*, double)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_printf3
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_printf2
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateIdle()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXYIdle()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDown()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[ad]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[af]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[b1]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[b2]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[b3]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b4]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[b0]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[81]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[77]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[aa]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[64]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsprintf.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[89]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[ba]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[85]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[8d]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[bb]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[87]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[8f]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[79]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[b6]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[20b]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b5]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[20d]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c6]"></a>_printf_fp_hex_real</STRONG> (Thumb, 754 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[c7]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[91]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[93]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[c8]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[95]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[97]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[b8]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[20e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c9]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[99]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[c5]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[bf]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1b7]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[210]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ce]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[cd]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[cf]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d0]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[c1]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c2]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d1]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[20]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = EXTI4_IRQHandler &rArr; RobotCtrl &rArr; CCtrlSystem::Control() &rArr; CCtrlSystem::JuneBugCtrl() &rArr; CJuneBugCtrl::Move() &rArr; CJuneBugCtrl::StateMoveXY() &rArr; CJuneBugCtrl::ScheduleXYMovement(float, float, float, float) &rArr; CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotCtrl
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f1xx_ll_fsmc.o(i.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[ea]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, stm32f1xx_ll_fsmc.o(i.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[eb]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, stm32f1xx_ll_fsmc.o(i.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[d4]"></a>FdkForUART2</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ctrlinterface.o(i.FdkForUART2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FdkForUART2
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::FdkForUART2(unsigned char**, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>FdkForUART3</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ctrlinterface.o(i.FdkForUART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FdkForUART3 &rArr; CCtrlBoard::FdkForUART3(unsigned char**, int*) &rArr; CCtrlSystem::FdkBuffer(unsigned char**, int*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::FdkForUART3(unsigned char**, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[f7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 790 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[d2]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::LedFlick()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::CCtrlBoard()
</UL>

<P><STRONG><a name="[d9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[103]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[da]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WWDG_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WWDG_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[db]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e3]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 1072 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[de]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e5]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[e7]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2432 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[e8]"></a>HAL_SRAM_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f1xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SRAM_Init &rArr; FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[e9]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_sram.o(i.HAL_SRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[ee]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ed]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_UART_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_UART_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_usart3
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_usart2
</UL>

<P><STRONG><a name="[f5]"></a>HAL_UART_MspInit</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[107]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_usart3
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_usart2
</UL>

<P><STRONG><a name="[105]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[f9]"></a>HAL_UART_Transmit</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_string_to_usart3
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_string_to_usart2
</UL>

<P><STRONG><a name="[104]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[fb]"></a>HAL_WWDG_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f1xx_hal_wwdg.o(i.HAL_WWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_WWDG_Init &rArr; HAL_WWDG_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WWDG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[fc]"></a>HAL_WWDG_MspInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wwdg.o(i.HAL_WWDG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_WWDG_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WWDG_Init
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_WWDG_Refresh</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f1xx_hal_wwdg.o(i.HAL_WWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_dog
</UL>

<P><STRONG><a name="[1e]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>RcvByteFromUART2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctrlinterface.o(i.RcvByteFromUART2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RcvByteFromUART2
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::RcvByteFromUART2(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>RcvByteFromUART3</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctrlinterface.o(i.RcvByteFromUART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = RcvByteFromUART3 &rArr; CCtrlBoard::RcvByteFromUART3(unsigned char) &rArr; CCtrlSystem::RcvCommandByte(char) &rArr; CCtrlSystem::ExtractCtrlOrder() &rArr; CMotionSimulator::SetParams(CMotionSimuParams) &rArr; CFilterAcc2Angle::SetParams(double, double, double) &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::RcvByteFromUART3(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>RobotCtrl</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ctrlinterface.o(i.RobotCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = RobotCtrl &rArr; CCtrlSystem::Control() &rArr; CCtrlSystem::JuneBugCtrl() &rArr; CJuneBugCtrl::Move() &rArr; CJuneBugCtrl::StateMoveXY() &rArr; CJuneBugCtrl::ScheduleXYMovement(float, float, float, float) &rArr; CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Control()
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>SendBuffer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usart.o(i.SendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SendBuffer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[25]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>USART2_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART2_IRQHandler &rArr; SendBuffer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvByteFromUART2
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdkForUART2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffer
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART3_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = USART3_IRQHandler &rArr; RcvByteFromUART3 &rArr; CCtrlBoard::RcvByteFromUART3(unsigned char) &rArr; CCtrlSystem::RcvCommandByte(char) &rArr; CCtrlSystem::ExtractCtrlOrder() &rArr; CMotionSimulator::SetParams(CMotionSimuParams) &rArr; CFilterAcc2Angle::SetParams(double, double, double) &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvByteFromUART3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdkForUART3
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffer
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>CopyVector(double*, double*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, basiccalc.o(i._Z10CopyVectorPdS_))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::SetJointCoordinates(double(*)[3], double(*)[3])
</UL>

<P><STRONG><a name="[16a]"></a>CopyVector(double*, double, double, double)</STRONG> (Thumb, 20 bytes, Stack size 20 bytes, basiccalc.o(i._Z10CopyVectorPdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CopyVector(double*, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotIKP::Move(double, double, double, double, double, double)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::SetStructureParams(double, double, double, double, double, double)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CRobot()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::InitStructureParams()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformZeroed()
</UL>

<P><STRONG><a name="[108]"></a>VectorAddVector(double*, double*, double*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, basiccalc.o(i._Z15VectorAddVectorPdS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VectorAddVector(double*, double*, double*) &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::SetStructureErrors(double(*)[3], double(*)[3])
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int)
</UL>

<P><STRONG><a name="[10a]"></a>MatrixMultiVector(double*, double(*)[3], double*)</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, basiccalc.o(i._Z17MatrixMultiVectorPdPA3_dS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MatrixMultiVector(double*, double(*)[3], double*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::RotateAroundZ(double*, double*, double)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int)
</UL>

<P><STRONG><a name="[10c]"></a>RotateMatrixByEuler(double(*)[3], double*)</STRONG> (Thumb, 496 bytes, Stack size 112 bytes, basiccalc.o(i._Z19RotateMatrixByEulerPA3_dPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int)
</UL>

<P><STRONG><a name="[111]"></a>Limit(double, double, double)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, basiccalc.o(i._Z5Limitddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Limit(double, double, double) &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>

<P><STRONG><a name="[114]"></a>Distance(double*, double*)</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, basiccalc.o(i._Z8DistancePdS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Distance(double*, double*) &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::CalcJackLength(double*)
</UL>

<P><STRONG><a name="[178]"></a>CAccSensor::CAccSensor()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, accsensor.o(i._ZN10CAccSensorC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::CStableCtrl()
</UL>

<P><STRONG><a name="[213]"></a>CAccSensor::CAccSensor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, accsensor.o(i._ZN10CAccSensorC1Ev), UNUSED)

<P><STRONG><a name="[d5]"></a>CCtrlBoard::FdkForUART2(unsigned char**, int*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctrlboard.o(i._ZN10CCtrlBoard11FdkForUART2EPPhPi))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdkForUART2
</UL>

<P><STRONG><a name="[d7]"></a>CCtrlBoard::FdkForUART3(unsigned char**, int*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ctrlboard.o(i._ZN10CCtrlBoard11FdkForUART3EPPhPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CCtrlBoard::FdkForUART3(unsigned char**, int*) &rArr; CCtrlSystem::FdkBuffer(unsigned char**, int*)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::FdkBuffer(unsigned char**, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdkForUART3
</UL>

<P><STRONG><a name="[117]"></a>CCtrlBoard::OutputPulse(int, int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ctrlboard.o(i._ZN10CCtrlBoard11OutputPulseEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CCtrlBoard::OutputPulse(int, int) &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::WriteFreqDivBase(int, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::WritePulseCnt(int, int)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::NormalCtrl()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::GoZeroCtrl()
</UL>

<P><STRONG><a name="[11b]"></a>CCtrlBoard::WritePulseCnt(int, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctrlboard.o(i._ZN10CCtrlBoard13WritePulseCntEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCtrlBoard::WritePulseCnt(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::CCtrlBoard()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputPulse(int, int)
</UL>

<P><STRONG><a name="[11d]"></a>CCtrlBoard::WriteDirection(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctrlboard.o(i._ZN10CCtrlBoard14WriteDirectionEi))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::CCtrlBoard()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputDirection(bool)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputDirection(bool*)
</UL>

<P><STRONG><a name="[11c]"></a>CCtrlBoard::OutputDirection(bool*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ctrlboard.o(i._ZN10CCtrlBoard15OutputDirectionEPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCtrlBoard::OutputDirection(bool*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::WriteDirection(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::NormalCtrl()
</UL>

<P><STRONG><a name="[11e]"></a>CCtrlBoard::OutputDirection(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ctrlboard.o(i._ZN10CCtrlBoard15OutputDirectionEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCtrlBoard::OutputDirection(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::WriteDirection(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::GoZeroCtrl()
</UL>

<P><STRONG><a name="[170]"></a>CCtrlBoard::RefreshDIStatus()</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, ctrlboard.o(i._ZN10CCtrlBoard15RefreshDIStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CCtrlBoard::RefreshDIStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::NormalCtrl()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::GoZeroCtrl()
</UL>

<P><STRONG><a name="[fe]"></a>CCtrlBoard::RcvByteFromUART2(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctrlboard.o(i._ZN10CCtrlBoard16RcvByteFromUART2Eh))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvByteFromUART2
</UL>

<P><STRONG><a name="[100]"></a>CCtrlBoard::RcvByteFromUART3(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ctrlboard.o(i._ZN10CCtrlBoard16RcvByteFromUART3Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = CCtrlBoard::RcvByteFromUART3(unsigned char) &rArr; CCtrlSystem::RcvCommandByte(char) &rArr; CCtrlSystem::ExtractCtrlOrder() &rArr; CMotionSimulator::SetParams(CMotionSimuParams) &rArr; CFilterAcc2Angle::SetParams(double, double, double) &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::RcvCommandByte(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvByteFromUART3
</UL>

<P><STRONG><a name="[16f]"></a>CCtrlBoard::RefreshPulseLeft()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ctrlboard.o(i._ZN10CCtrlBoard16RefreshPulseLeftEv))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::NormalCtrl()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::GoZeroCtrl()
</UL>

<P><STRONG><a name="[11a]"></a>CCtrlBoard::WriteFreqDivBase(int, int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctrlboard.o(i._ZN10CCtrlBoard16WriteFreqDivBaseEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCtrlBoard::WriteFreqDivBase(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::CCtrlBoard()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputPulse(int, int)
</UL>

<P><STRONG><a name="[120]"></a>CCtrlBoard::CCtrlBoard()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ctrlboard.o(i._ZN10CCtrlBoardC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CCtrlBoard::CCtrlBoard() &rArr; CCtrlBoard::WriteFreqDivBase(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::WriteFreqDivBase(int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::WriteDirection(int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::WritePulseCnt(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_CtrlBoard_cpp_7278497b
</UL>

<P><STRONG><a name="[214]"></a>CCtrlBoard::CCtrlBoard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ctrlboard.o(i._ZN10CCtrlBoardC1Ev), UNUSED)

<P><STRONG><a name="[121]"></a>CMoveTrace::Stop()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cubictrace.o(i._ZN10CMoveTrace4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMoveTrace::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
</UL>

<P><STRONG><a name="[123]"></a>CMoveTrace::Decay()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cubictrace.o(i._ZN10CMoveTrace5DecayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CMoveTrace::Decay() &rArr; CCubicTrace::Decay() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Decay()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
</UL>

<P><STRONG><a name="[125]"></a>CMoveTrace::Speed(float, float*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cubictrace.o(i._ZN10CMoveTrace5SpeedEfPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CMoveTrace::Speed(float, float*) &rArr; CCubicTrace::Speed(float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Speed(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*)
</UL>

<P><STRONG><a name="[127]"></a>CMoveTrace::Position(float, float*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cubictrace.o(i._ZN10CMoveTrace8PositionEfPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CMoveTrace::Position(float, float*) &rArr; CCubicTrace::Position(float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Position(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDown()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveByTrace()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
</UL>

<P><STRONG><a name="[129]"></a>CMoveTrace::Schedule(float*, float*, float*, float*)</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, cubictrace.o(i._ZN10CMoveTrace8ScheduleEPfS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CMoveTrace::Schedule(float*, float*, float*, float*) &rArr; CMoveTrace::Schedule(float, float*, float*, float*, float*) &rArr; CCubicTrace::Refresh(float, float, float, float, float) &rArr; CCubicTrace::MaxSpeed(float) &rArr; CCubicTrace::Max(double, double) &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float, float*, float*, float*, float*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*, float*, float*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
</UL>

<P><STRONG><a name="[12d]"></a>CMoveTrace::Schedule(float, float*, float*, float*, float*)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, cubictrace.o(i._ZN10CMoveTrace8ScheduleEfPfS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CMoveTrace::Schedule(float, float*, float*, float*, float*) &rArr; CCubicTrace::Refresh(float, float, float, float, float) &rArr; CCubicTrace::MaxSpeed(float) &rArr; CCubicTrace::Max(double, double) &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Refresh(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[130]"></a>CCtrlSystem::StableCtrl()</STRONG> (Thumb, 112 bytes, Stack size 120 bytes, ctrlsystem.o(i._ZN11CCtrlSystem10StableCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = CCtrlSystem::StableCtrl() &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Control()
</UL>

<P><STRONG><a name="[133]"></a>CCtrlSystem::JuneBugCtrl()</STRONG> (Thumb, 184 bytes, Stack size 120 bytes, ctrlsystem.o(i._ZN11CCtrlSystem11JuneBugCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = CCtrlSystem::JuneBugCtrl() &rArr; CJuneBugCtrl::Move() &rArr; CJuneBugCtrl::StateMoveXY() &rArr; CJuneBugCtrl::ScheduleXYMovement(float, float, float, float) &rArr; CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Move()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Control()
</UL>

<P><STRONG><a name="[135]"></a>CCtrlSystem::DirectJackCtrl()</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, ctrlsystem.o(i._ZN11CCtrlSystem14DirectJackCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CCtrlSystem::DirectJackCtrl() &rArr; CRobot::SetJackServo(int, double) &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::SetJackServo(int, double)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Control()
</UL>

<P><STRONG><a name="[137]"></a>CCtrlSystem::MotionSimuCtrl()</STRONG> (Thumb, 174 bytes, Stack size 168 bytes, ctrlsystem.o(i._ZN11CCtrlSystem14MotionSimuCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = CCtrlSystem::MotionSimuCtrl() &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Control()
</UL>

<P><STRONG><a name="[11f]"></a>CCtrlSystem::RcvCommandByte(char)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ctrlsystem.o(i._ZN11CCtrlSystem14RcvCommandByteEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = CCtrlSystem::RcvCommandByte(char) &rArr; CCtrlSystem::ExtractCtrlOrder() &rArr; CMotionSimulator::SetParams(CMotionSimuParams) &rArr; CFilterAcc2Angle::SetParams(double, double, double) &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::ReceiveCtrlOrder(unsigned char)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::FdkRobotStatus(CCtrlSystem*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::OnCtrlModeChanged(int)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::RcvByteFromUART3(unsigned char)
</UL>

<P><STRONG><a name="[13b]"></a>CCtrlSystem::ExtractCtrlOrder()</STRONG> (Thumb, 480 bytes, Stack size 224 bytes, ctrlsystem.o(i._ZN11CCtrlSystem16ExtractCtrlOrderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = CCtrlSystem::ExtractCtrlOrder() &rArr; CMotionSimulator::SetParams(CMotionSimuParams) &rArr; CFilterAcc2Angle::SetParams(double, double, double) &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit(double, double, double)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::SetParams(CMotionSimuParams)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::FeedTargetAccAndSpd(double, double, double, double, double, double)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::NewDestination(float*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetJackCtrlOrder(int&, float&, float&)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetAccCtrlParams(CMotionSimuParams&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetPosCtrlOrder(float&, float&, float&, float&, float&, float&)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetJuneBugOrder(float&, float&, float&, float&, float&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetAccCtrlOrder(float&, float&, float&, float&, float&, float&)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Reset()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::RcvCommandByte(char)
</UL>

<P><STRONG><a name="[13a]"></a>CCtrlSystem::OnCtrlModeChanged(int)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, ctrlsystem.o(i._ZN11CCtrlSystem17OnCtrlModeChangedEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CCtrlSystem::OnCtrlModeChanged(int) &rArr; CMotionTracker::Initialize(double*, double*) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Initialize(double*, double*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::RcvCommandByte(char)
</UL>

<P><STRONG><a name="[147]"></a>CCtrlSystem::DirectPosEurlarCtrl()</STRONG> (Thumb, 252 bytes, Stack size 136 bytes, ctrlsystem.o(i._ZN11CCtrlSystem19DirectPosEurlarCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CCtrlSystem::DirectPosEurlarCtrl() &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Control()
</UL>

<P><STRONG><a name="[13d]"></a>CCtrlSystem::Reset()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ctrlsystem.o(i._ZN11CCtrlSystem5ResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>

<P><STRONG><a name="[101]"></a>CCtrlSystem::Control()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ctrlsystem.o(i._ZN11CCtrlSystem7ControlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = CCtrlSystem::Control() &rArr; CCtrlSystem::JuneBugCtrl() &rArr; CJuneBugCtrl::Move() &rArr; CJuneBugCtrl::StateMoveXY() &rArr; CJuneBugCtrl::ScheduleXYMovement(float, float, float, float) &rArr; CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::ServoCtrl()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::RobotMove(CRobot&)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::LedFlick()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectPosEurlarCtrl()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::MotionSimuCtrl()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectJackCtrl()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::JuneBugCtrl()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::StableCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotCtrl
</UL>

<P><STRONG><a name="[149]"></a>CCtrlSystem::LedFlick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ctrlsystem.o(i._ZN11CCtrlSystem8LedFlickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCtrlSystem::LedFlick()
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Control()
</UL>

<P><STRONG><a name="[116]"></a>CCtrlSystem::FdkBuffer(unsigned char**, int*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ctrlsystem.o(i._ZN11CCtrlSystem9FdkBufferEPPhPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCtrlSystem::FdkBuffer(unsigned char**, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::FdkForUART3(unsigned char**, int*)
</UL>

<P><STRONG><a name="[14a]"></a>CCtrlSystem::ResetCtrl()</STRONG> (Thumb, 236 bytes, Stack size 88 bytes, ctrlsystem.o(i._ZN11CCtrlSystem9ResetCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = CCtrlSystem::ResetCtrl() &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformZeroed()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Initialize(double*, double*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Initialize()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::RobotMove(CRobot&)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::IsAllZeroed()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PosZ()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Control()
</UL>

<P><STRONG><a name="[152]"></a>CCtrlSystem::CCtrlSystem()</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, ctrlsystem.o(i._ZN11CCtrlSystemC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = CCtrlSystem::CCtrlSystem() &rArr; CJuneBugCtrl::CJuneBugCtrl() &rArr; CRobot::InitStructureParams() &rArr; CRobotBasic::SetStructureParams(double, double, double, double, double, double) &rArr; CRobotBasic::RotateAroundZ(double*, double*, double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CRobot()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::InitStructureParams()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::SetParams(double, double, double)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::SetParams(double, double, double, double)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::CMotionSimulator()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::SetParams(double, double, double)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::CMotionTracker()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::CRobotCommPkg()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::CJuneBugCtrl()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::CStableCtrl()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::CRobotServo()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Reset()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_CtrlSystem_cpp_e608436e
</UL>

<P><STRONG><a name="[215]"></a>CCtrlSystem::CCtrlSystem__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, ctrlsystem.o(i._ZN11CCtrlSystemC1Ev), UNUSED)

<P><STRONG><a name="[15e]"></a>CCubicTrace::Max(double, double)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, cubictrace.o(i._ZN11CCubicTrace3MaxEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CCubicTrace::Max(double, double) &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxSpeed(float)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxAcc(float)
</UL>

<P><STRONG><a name="[122]"></a>CCubicTrace::Stop()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cubictrace.o(i._ZN11CCubicTrace4StopEv))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Stop()
</UL>

<P><STRONG><a name="[124]"></a>CCubicTrace::Decay()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cubictrace.o(i._ZN11CCubicTrace5DecayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CCubicTrace::Decay() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Decay()
</UL>

<P><STRONG><a name="[126]"></a>CCubicTrace::Speed(float)</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, cubictrace.o(i._ZN11CCubicTrace5SpeedEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CCubicTrace::Speed(float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Speed(float, float*)
</UL>

<P><STRONG><a name="[15f]"></a>CCubicTrace::MaxAcc(float)</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, cubictrace.o(i._ZN11CCubicTrace6MaxAccEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CCubicTrace::MaxAcc(float) &rArr; CCubicTrace::Max(double, double) &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Max(double, double)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Refresh(float, float, float, float, float)
</UL>

<P><STRONG><a name="[12f]"></a>CCubicTrace::Refresh(float, float, float, float, float)</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, cubictrace.o(i._ZN11CCubicTrace7RefreshEfffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CCubicTrace::Refresh(float, float, float, float, float) &rArr; CCubicTrace::MaxSpeed(float) &rArr; CCubicTrace::Max(double, double) &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxSpeed(float)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxAcc(float)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float, float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[165]"></a>CCubicTrace::SetZero()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cubictrace.o(i._ZN11CCubicTrace7SetZeroEv))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleIdleMovement()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::CCubicTrace()
</UL>

<P><STRONG><a name="[162]"></a>CCubicTrace::MaxSpeed(float)</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, cubictrace.o(i._ZN11CCubicTrace8MaxSpeedEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CCubicTrace::MaxSpeed(float) &rArr; CCubicTrace::Max(double, double) &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Max(double, double)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Refresh(float, float, float, float, float)
</UL>

<P><STRONG><a name="[128]"></a>CCubicTrace::Position(float)</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, cubictrace.o(i._ZN11CCubicTrace8PositionEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CCubicTrace::Position(float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Position(float, float*)
</UL>

<P><STRONG><a name="[68]"></a>CCubicTrace::CCubicTrace()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, cubictrace.o(i._ZN11CCubicTraceC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCubicTrace::CCubicTrace()
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::SetZero()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> motiontrack.o(i._ZN14CMotionTrackerC1Ev)
<LI> junebugctrl.o(i._ZN12CJuneBugCtrlC1Ev)
</UL>
<P><STRONG><a name="[216]"></a>CCubicTrace::CCubicTrace__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, cubictrace.o(i._ZN11CCubicTraceC1Ev), UNUSED)

<P><STRONG><a name="[166]"></a>CRobotBasic::RotateAroundZ(double*, double*, double)</STRONG> (Thumb, 118 bytes, Stack size 112 bytes, robotbasic.o(i._ZN11CRobotBasic13RotateAroundZEPdS0_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CRobotBasic::RotateAroundZ(double*, double*, double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixMultiVector(double*, double(*)[3], double*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::SetStructureParams(double, double, double, double, double, double)
</UL>

<P><STRONG><a name="[167]"></a>CRobotBasic::CalcJackLength(double*)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, robotbasic.o(i._ZN11CRobotBasic14CalcJackLengthEPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CRobotBasic::CalcJackLength(double*) &rArr; Distance(double*, double*) &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance(double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotIKP::Move(double, double, double, double, double, double)
</UL>

<P><STRONG><a name="[168]"></a>CRobotBasic::SetStructureErrors(double(*)[3], double(*)[3])</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, robotbasic.o(i._ZN11CRobotBasic18SetStructureErrorsEPA3_dS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRobotBasic::SetStructureErrors(double(*)[3], double(*)[3]) &rArr; VectorAddVector(double*, double*, double*) &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorAddVector(double*, double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::InitStructureParams()
</UL>

<P><STRONG><a name="[169]"></a>CRobotBasic::SetStructureParams(double, double, double, double, double, double)</STRONG> (Thumb, 326 bytes, Stack size 376 bytes, robotbasic.o(i._ZN11CRobotBasic18SetStructureParamsEdddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CRobotBasic::SetStructureParams(double, double, double, double, double, double) &rArr; CRobotBasic::RotateAroundZ(double*, double*, double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyVector(double*, double, double, double)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::SetJointCoordinates(double(*)[3], double(*)[3])
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::RotateAroundZ(double*, double*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::InitStructureParams()
</UL>

<P><STRONG><a name="[16b]"></a>CRobotBasic::SetJointCoordinates(double(*)[3], double(*)[3])</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, robotbasic.o(i._ZN11CRobotBasic19SetJointCoordinatesEPA3_dS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRobotBasic::SetJointCoordinates(double(*)[3], double(*)[3])
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyVector(double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::SetStructureParams(double, double, double, double, double, double)
</UL>

<P><STRONG><a name="[16d]"></a>CRobotBasic::CRobotBasic()</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, robotbasic.o(i._ZN11CRobotBasicC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CRobotBasic::CRobotBasic() &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotFKP::CRobotFKP()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CRobot()
</UL>

<P><STRONG><a name="[217]"></a>CRobotBasic::CRobotBasic__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, robotbasic.o(i._ZN11CRobotBasicC1Ev), UNUSED)

<P><STRONG><a name="[16e]"></a>CRobotServo::GoZeroCtrl()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, robotservo.o(i._ZN11CRobotServo10GoZeroCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CRobotServo::GoZeroCtrl() &rArr; CCtrlBoard::OutputPulse(int, int) &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::RefreshPulseLeft()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::RefreshDIStatus()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputDirection(bool)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputPulse(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::ServoCtrl()
</UL>

<P><STRONG><a name="[171]"></a>CRobotServo::NormalCtrl()</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, robotservo.o(i._ZN11CRobotServo10NormalCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CRobotServo::NormalCtrl() &rArr; CRobotServo::FilterDestination(int, int) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::RefreshPulseLeft()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::RefreshDIStatus()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputDirection(bool*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputPulse(int, int)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::FilterDestination(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::ServoCtrl()
</UL>

<P><STRONG><a name="[14d]"></a>CRobotServo::IsAllZeroed()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, robotservo.o(i._ZN11CRobotServo11IsAllZeroedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRobotServo::IsAllZeroed()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
</UL>

<P><STRONG><a name="[172]"></a>CRobotServo::FilterDestination(int, int)</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, robotservo.o(i._ZN11CRobotServo17FilterDestinationEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CRobotServo::FilterDestination(int, int) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::NormalCtrl()
</UL>

<P><STRONG><a name="[14b]"></a>CRobotServo::RobotMove(CRobot&)</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, robotservo.o(i._ZN11CRobotServo9RobotMoveER6CRobot))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CRobotServo::RobotMove(CRobot&) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Control()
</UL>

<P><STRONG><a name="[14c]"></a>CRobotServo::ServoCtrl()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, robotservo.o(i._ZN11CRobotServo9ServoCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CRobotServo::ServoCtrl() &rArr; CRobotServo::NormalCtrl() &rArr; CRobotServo::FilterDestination(int, int) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::NormalCtrl()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::GoZeroCtrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::Control()
</UL>

<P><STRONG><a name="[158]"></a>CRobotServo::CRobotServo()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, robotservo.o(i._ZN11CRobotServoC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[218]"></a>CRobotServo::CRobotServo__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, robotservo.o(i._ZN11CRobotServoC1Ev), UNUSED)

<P><STRONG><a name="[131]"></a>CStableCtrl::GetPlatformPosition(double&, double&, double&, double&, double&, double&)</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, stablectrl.o(i._ZN11CStableCtrl19GetPlatformPositionERdS0_S0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CStableCtrl::GetPlatformPosition(double&, double&, double&, double&, double&, double&) &rArr; CStableCtrl::SingleMotionChannelCtrl(int, double, double) &rArr; CFilterAcc2Motion::Output(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::SingleMotionChannelCtrl(int, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::StableCtrl()
</UL>

<P><STRONG><a name="[175]"></a>CStableCtrl::SingleChannelFwdBwdCtrl(int, double, double)</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, stablectrl.o(i._ZN11CStableCtrl23SingleChannelFwdBwdCtrlEidd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CStableCtrl::SingleChannelFwdBwdCtrl(int, double, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::SingleMotionChannelCtrl(int, double, double)
</UL>

<P><STRONG><a name="[174]"></a>CStableCtrl::SingleMotionChannelCtrl(int, double, double)</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, stablectrl.o(i._ZN11CStableCtrl23SingleMotionChannelCtrlEidd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CStableCtrl::SingleMotionChannelCtrl(int, double, double) &rArr; CFilterAcc2Motion::Output(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::Output(double)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::SingleChannelFwdBwdCtrl(int, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
</UL>

<P><STRONG><a name="[155]"></a>CStableCtrl::CStableCtrl()</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, stablectrl.o(i._ZN11CStableCtrlC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CStableCtrl::CStableCtrl() &rArr; CFilterAcc2Motion::SetParams(double, double, double, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAccSensor::CAccSensor()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::SetParams(double, double, double, double)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[219]"></a>CStableCtrl::CStableCtrl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, stablectrl.o(i._ZN11CStableCtrlC1Ev), UNUSED)

<P><STRONG><a name="[151]"></a>CJuneBugCtrl::Initialize()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl10InitializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CJuneBugCtrl::Initialize() &rArr; CJuneBugCtrl::ScheduleIdleMovement()
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleIdleMovement()
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::CJuneBugCtrl()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
</UL>

<P><STRONG><a name="[17b]"></a>CJuneBugCtrl::MoveByTrace()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl11MoveByTraceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CJuneBugCtrl::MoveByTrace() &rArr; CMoveTrace::Position(float, float*) &rArr; CCubicTrace::Position(float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Position(float, float*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Move()
</UL>

<P><STRONG><a name="[17c]"></a>CJuneBugCtrl::StateMoveXY()</STRONG> (Thumb, 586 bytes, Stack size 96 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl11StateMoveXYEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = CJuneBugCtrl::StateMoveXY() &rArr; CJuneBugCtrl::ScheduleXYMovement(float, float, float, float) &rArr; CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Length(float, float, float)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveRequired()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Position(float)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Move()
</UL>

<P><STRONG><a name="[17d]"></a>CJuneBugCtrl::MoveRequired()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl12MoveRequiredEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CJuneBugCtrl::MoveRequired() &rArr; CJuneBugCtrl::Length(float, float) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Length(float, float)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateIdle()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXYIdle()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDown()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
</UL>

<P><STRONG><a name="[184]"></a>CJuneBugCtrl::StateMoveUpDown()</STRONG> (Thumb, 348 bytes, Stack size 88 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl15StateMoveUpDownEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = CJuneBugCtrl::StateMoveUpDown() &rArr; CJuneBugCtrl::ScheduleXYMovement(float, float, float, float) &rArr; CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveRequired()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Position(float, float*)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Move()
</UL>

<P><STRONG><a name="[185]"></a>CJuneBugCtrl::StateMoveXYIdle()</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl15StateMoveXYIdleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = CJuneBugCtrl::StateMoveXYIdle() &rArr; CJuneBugCtrl::ScheduleXYMovement(float, float, float, float) &rArr; CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveRequired()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Move()
</UL>

<P><STRONG><a name="[17e]"></a>CJuneBugCtrl::ScheduleMovement(float*, float*)</STRONG> (Thumb, 56 bytes, Stack size 72 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl16ScheduleMovementEPfS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = CJuneBugCtrl::ScheduleMovement(float*, float*) &rArr; CJuneBugCtrl::ScheduleMovement(float*, float*, float*, float*) &rArr; CMoveTrace::Schedule(float*, float*, float*, float*) &rArr; CMoveTrace::Schedule(float, float*, float*, float*, float*) &rArr; CCubicTrace::Refresh(float, float, float, float, float) &rArr; CCubicTrace::MaxSpeed(float) &rArr; CCubicTrace::Max(double, double) &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*, float*, float*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Position(float, float*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Speed(float, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateIdle()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXYIdle()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDown()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
</UL>

<P><STRONG><a name="[186]"></a>CJuneBugCtrl::ScheduleMovement(float*, float*, float*, float*)</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl16ScheduleMovementEPfS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CJuneBugCtrl::ScheduleMovement(float*, float*, float*, float*) &rArr; CMoveTrace::Schedule(float*, float*, float*, float*) &rArr; CMoveTrace::Schedule(float, float*, float*, float*, float*) &rArr; CCubicTrace::Refresh(float, float, float, float, float) &rArr; CCubicTrace::MaxSpeed(float) &rArr; CCubicTrace::Max(double, double) &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float*, float*, float*, float*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*)
</UL>

<P><STRONG><a name="[182]"></a>CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)</STRONG> (Thumb, 314 bytes, Stack size 120 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl18ScheduleXYMovementEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = CJuneBugCtrl::ScheduleXYMovement(float, float, float, float) &rArr; CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Length(float, float)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXYIdle()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDown()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
</UL>

<P><STRONG><a name="[187]"></a>CJuneBugCtrl::StateMoveUpDownIdle()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl19StateMoveUpDownIdleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CJuneBugCtrl::StateMoveUpDownIdle() &rArr; CJuneBugCtrl::ScheduleIdleMovement()
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleIdleMovement()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Move()
</UL>

<P><STRONG><a name="[17a]"></a>CJuneBugCtrl::ScheduleIdleMovement()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl20ScheduleIdleMovementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CJuneBugCtrl::ScheduleIdleMovement()
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::SetZero()
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateIdle()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDownIdle()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Initialize()
</UL>

<P><STRONG><a name="[17f]"></a>CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)</STRONG> (Thumb, 262 bytes, Stack size 128 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl25SearchForTheLargestXYStepEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
</UL>

<P><STRONG><a name="[134]"></a>CJuneBugCtrl::Move()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl4MoveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = CJuneBugCtrl::Move() &rArr; CJuneBugCtrl::StateMoveXY() &rArr; CJuneBugCtrl::ScheduleXYMovement(float, float, float, float) &rArr; CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float) &rArr; CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateIdle()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDownIdle()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXYIdle()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDown()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveByTrace()
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::JuneBugCtrl()
</UL>

<P><STRONG><a name="[183]"></a>CJuneBugCtrl::Length(float, float)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl6LengthEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CJuneBugCtrl::Length(float, float) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveRequired()
</UL>

<P><STRONG><a name="[180]"></a>CJuneBugCtrl::Length(float, float, float)</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl6LengthEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CJuneBugCtrl::Length(float, float, float) &rArr; std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
</UL>

<P><STRONG><a name="[189]"></a>CJuneBugCtrl::StateIdle()</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, junebugctrl.o(i._ZN12CJuneBugCtrl9StateIdleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = CJuneBugCtrl::StateIdle() &rArr; CJuneBugCtrl::ScheduleMovement(float*, float*) &rArr; CJuneBugCtrl::ScheduleMovement(float*, float*, float*, float*) &rArr; CMoveTrace::Schedule(float*, float*, float*, float*) &rArr; CMoveTrace::Schedule(float, float*, float*, float*, float*) &rArr; CCubicTrace::Refresh(float, float, float, float, float) &rArr; CCubicTrace::MaxSpeed(float) &rArr; CCubicTrace::Max(double, double) &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleIdleMovement()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveRequired()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Move()
</UL>

<P><STRONG><a name="[156]"></a>CJuneBugCtrl::CJuneBugCtrl()</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, junebugctrl.o(i._ZN12CJuneBugCtrlC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = CJuneBugCtrl::CJuneBugCtrl() &rArr; CRobot::InitStructureParams() &rArr; CRobotBasic::SetStructureParams(double, double, double, double, double, double) &rArr; CRobotBasic::RotateAroundZ(double*, double*, double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CRobot()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::InitStructureParams()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Initialize()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[21a]"></a>CJuneBugCtrl::CJuneBugCtrl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, junebugctrl.o(i._ZN12CJuneBugCtrlC1Ev), UNUSED)

<P><STRONG><a name="[18c]"></a>CRobotCommPkg::Buffer2Short(unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, robotcomm.o(i._ZN13CRobotCommPkg12Buffer2ShortEPh))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetJackCtrlOrder(int&, float&, float&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetPosCtrlOrder(float&, float&, float&, float&, float&, float&)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetJuneBugOrder(float&, float&, float&, float&, float&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetAccCtrlOrder(float&, float&, float&, float&, float&, float&)
</UL>

<P><STRONG><a name="[13c]"></a>CRobotCommPkg::FdkRobotStatus(CCtrlSystem*)</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, robotcomm.o(i._ZN13CRobotCommPkg14FdkRobotStatusEP11CCtrlSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CRobotCommPkg::FdkRobotStatus(CCtrlSystem*) &rArr; CRobotCommPkg::AddCRC(unsigned char*, int) &rArr; CRobotCommPkg::CalcCRC(unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::AddCRC(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::RcvCommandByte(char)
</UL>

<P><STRONG><a name="[141]"></a>CRobotCommPkg::GetAccCtrlOrder(float&, float&, float&, float&, float&, float&)</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, robotcomm.o(i._ZN13CRobotCommPkg15GetAccCtrlOrderERfS0_S0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRobotCommPkg::GetAccCtrlOrder(float&, float&, float&, float&, float&, float&) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::Buffer2Short(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>

<P><STRONG><a name="[145]"></a>CRobotCommPkg::GetJuneBugOrder(float&, float&, float&, float&, float&)</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, robotcomm.o(i._ZN13CRobotCommPkg15GetJuneBugOrderERfS0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRobotCommPkg::GetJuneBugOrder(float&, float&, float&, float&, float&) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::Buffer2Short(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>

<P><STRONG><a name="[13f]"></a>CRobotCommPkg::GetPosCtrlOrder(float&, float&, float&, float&, float&, float&)</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, robotcomm.o(i._ZN13CRobotCommPkg15GetPosCtrlOrderERfS0_S0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRobotCommPkg::GetPosCtrlOrder(float&, float&, float&, float&, float&, float&) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::Buffer2Short(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>

<P><STRONG><a name="[143]"></a>CRobotCommPkg::GetAccCtrlParams(CMotionSimuParams&)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, robotcomm.o(i._ZN13CRobotCommPkg16GetAccCtrlParamsER17CMotionSimuParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRobotCommPkg::GetAccCtrlParams(CMotionSimuParams&)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>

<P><STRONG><a name="[13e]"></a>CRobotCommPkg::GetJackCtrlOrder(int&, float&, float&)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, robotcomm.o(i._ZN13CRobotCommPkg16GetJackCtrlOrderERiRfS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRobotCommPkg::GetJackCtrlOrder(int&, float&, float&) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::Buffer2Short(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>

<P><STRONG><a name="[139]"></a>CRobotCommPkg::ReceiveCtrlOrder(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, robotcomm.o(i._ZN13CRobotCommPkg16ReceiveCtrlOrderEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CRobotCommPkg::ReceiveCtrlOrder(unsigned char) &rArr; CRobotCommPkg::CheckReceivedComm(unsigned char, unsigned char*, int&) &rArr; CRobotCommPkg::CheckCRC(unsigned char*, int) &rArr; CRobotCommPkg::CalcCRC(unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::CheckReceivedComm(unsigned char, unsigned char*, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::RcvCommandByte(char)
</UL>

<P><STRONG><a name="[18e]"></a>CRobotCommPkg::CheckReceivedComm(unsigned char, unsigned char*, int&)</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, robotcomm.o(i._ZN13CRobotCommPkg17CheckReceivedCommEhPhRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CRobotCommPkg::CheckReceivedComm(unsigned char, unsigned char*, int&) &rArr; CRobotCommPkg::CheckCRC(unsigned char*, int) &rArr; CRobotCommPkg::CalcCRC(unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::CheckCRC(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::ReceiveCtrlOrder(unsigned char)
</UL>

<P><STRONG><a name="[18b]"></a>CRobotCommPkg::AddCRC(unsigned char*, int)</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, robotcomm.o(i._ZN13CRobotCommPkg6AddCRCEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CRobotCommPkg::AddCRC(unsigned char*, int) &rArr; CRobotCommPkg::CalcCRC(unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::CalcCRC(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::FdkRobotStatus(CCtrlSystem*)
</UL>

<P><STRONG><a name="[190]"></a>CRobotCommPkg::CalcCRC(unsigned char*, int)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, robotcomm.o(i._ZN13CRobotCommPkg7CalcCRCEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRobotCommPkg::CalcCRC(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::CheckCRC(unsigned char*, int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::AddCRC(unsigned char*, int)
</UL>

<P><STRONG><a name="[18f]"></a>CRobotCommPkg::CheckCRC(unsigned char*, int)</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, robotcomm.o(i._ZN13CRobotCommPkg8CheckCRCEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CRobotCommPkg::CheckCRC(unsigned char*, int) &rArr; CRobotCommPkg::CalcCRC(unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::CalcCRC(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::CheckReceivedComm(unsigned char, unsigned char*, int&)
</UL>

<P><STRONG><a name="[159]"></a>CRobotCommPkg::CRobotCommPkg()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, robotcomm.o(i._ZN13CRobotCommPkgC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[21b]"></a>CRobotCommPkg::CRobotCommPkg__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, robotcomm.o(i._ZN13CRobotCommPkgC1Ev), UNUSED)

<P><STRONG><a name="[6d]"></a>CLowPassFilter::Filter(double)</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, motionsimu.o(i._ZN14CLowPassFilter6FilterEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLowPassFilter::Filter(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHighPassFilter::Filter(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motionsimu.o(.constdata__ZTV14CLowPassFilter)
</UL>
<P><STRONG><a name="[6c]"></a>CLowPassFilter::SetParams(double)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motionsimu.o(i._ZN14CLowPassFilter9SetParamsEd))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::CMotionSimulator()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::SetParams(CMotionSimuParams)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> motionsimu.o(.constdata__ZTV14CLowPassFilter)
<LI> motionsimu.o(.constdata__ZTV15CHighPassFilter)
</UL>
<P><STRONG><a name="[192]"></a>CLowPassFilter::CLowPassFilter()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motionsimu.o(i._ZN14CLowPassFilterC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHighPassFilter::CHighPassFilter()
</UL>

<P><STRONG><a name="[21c]"></a>CLowPassFilter::CLowPassFilter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, motionsimu.o(i._ZN14CLowPassFilterC1Ev), UNUSED)

<P><STRONG><a name="[191]"></a>CMotionTracker::GetCurTime()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motiontrack.o(i._ZN14CMotionTracker10GetCurTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::NewDestination(float*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Initialize(double*, double*)
</UL>

<P><STRONG><a name="[146]"></a>CMotionTracker::Initialize(double*, double*)</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, motiontrack.o(i._ZN14CMotionTracker10InitializeEPdS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CMotionTracker::Initialize(double*, double*) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::GetCurTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::OnCtrlModeChanged(int)
</UL>

<P><STRONG><a name="[140]"></a>CMotionTracker::NewDestination(float*)</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, motiontrack.o(i._ZN14CMotionTracker14NewDestinationEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMotionTracker::NewDestination(float*) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::GetCurTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>

<P><STRONG><a name="[148]"></a>CMotionTracker::Move(double*, double*)</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, motiontrack.o(i._ZN14CMotionTracker4MoveEPdS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CMotionTracker::Move(double*, double*) &rArr; CMoveTrace::Schedule(float*, float*, float*, float*) &rArr; CMoveTrace::Schedule(float, float*, float*, float*, float*) &rArr; CCubicTrace::Refresh(float, float, float, float, float) &rArr; CCubicTrace::MaxSpeed(float) &rArr; CCubicTrace::Max(double, double) &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float*, float*, float*, float*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Position(float, float*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Decay()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Stop()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectPosEurlarCtrl()
</UL>

<P><STRONG><a name="[157]"></a>CMotionTracker::CMotionTracker()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, motiontrack.o(i._ZN14CMotionTrackerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CMotionTracker::CMotionTracker() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[21d]"></a>CMotionTracker::CMotionTracker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, motiontrack.o(i._ZN14CMotionTrackerC1Ev), UNUSED)

<P><STRONG><a name="[6e]"></a>CHighPassFilter::Filter(double)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, motionsimu.o(i._ZN15CHighPassFilter6FilterEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CHighPassFilter::Filter(double) &rArr; CLowPassFilter::Filter(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLowPassFilter::Filter(double)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motionsimu.o(.constdata__ZTV15CHighPassFilter)
</UL>
<P><STRONG><a name="[6b]"></a>CHighPassFilter::CHighPassFilter()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, motionsimu.o(i._ZN15CHighPassFilterC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CHighPassFilter::CHighPassFilter()
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLowPassFilter::CLowPassFilter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motionsimu.o(i._ZN16CMotionSimulatorC1Ev)
</UL>
<P><STRONG><a name="[21e]"></a>CHighPassFilter::CHighPassFilter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, motionsimu.o(i._ZN15CHighPassFilterC1Ev), UNUSED)

<P><STRONG><a name="[193]"></a>CFilterAcc2Angle::Output(double)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, motionsimu.o(i._ZN16CFilterAcc2Angle6OutputEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CFilterAcc2Angle::Output(double) &rArr; CFilterAcc2Motion::Output(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::Output(double)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
</UL>

<P><STRONG><a name="[195]"></a>CFilterAcc2Angle::RealAcc()</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, motionsimu.o(i._ZN16CFilterAcc2Angle7RealAccEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CFilterAcc2Angle::RealAcc() &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
</UL>

<P><STRONG><a name="[15d]"></a>CFilterAcc2Angle::SetParams(double, double, double)</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, motionsimu.o(i._ZN16CFilterAcc2Angle9SetParamsEddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CFilterAcc2Angle::SetParams(double, double, double) &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::SetParams(double, double, double, double)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::SetParams(CMotionSimuParams)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[6a]"></a>CFilterAcc2Angle::CFilterAcc2Angle()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motionsimu.o(i._ZN16CFilterAcc2AngleC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CFilterAcc2Angle::CFilterAcc2Angle() &rArr; CFilterAcc2Motion::CFilterAcc2Motion() &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::CFilterAcc2Motion()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motionsimu.o(i._ZN16CMotionSimulatorC1Ev)
</UL>
<P><STRONG><a name="[21f]"></a>CFilterAcc2Angle::CFilterAcc2Angle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, motionsimu.o(i._ZN16CFilterAcc2AngleC1Ev), UNUSED)

<P><STRONG><a name="[196]"></a>CMotionSimulator::SampleOutputTime()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motionsimu.o(i._ZN16CMotionSimulator16SampleOutputTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
</UL>

<P><STRONG><a name="[142]"></a>CMotionSimulator::FeedTargetAccAndSpd(double, double, double, double, double, double)</STRONG> (Thumb, 42 bytes, Stack size 36 bytes, motionsimu.o(i._ZN16CMotionSimulator19FeedTargetAccAndSpdEdddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CMotionSimulator::FeedTargetAccAndSpd(double, double, double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>

<P><STRONG><a name="[138]"></a>CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)</STRONG> (Thumb, 446 bytes, Stack size 96 bytes, motionsimu.o(i._ZN16CMotionSimulator19GetPlatformPositionERdS0_S0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&) &rArr; CFilterAcc2Angle::RealAcc() &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::RealSpd()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::Output(double)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::RealAcc()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::Output(double)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::SampleOutputTime()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::RealAcc()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::Output(double)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHighPassFilter::Filter(double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::MotionSimuCtrl()
</UL>

<P><STRONG><a name="[144]"></a>CMotionSimulator::SetParams(CMotionSimuParams)</STRONG> (Thumb, 438 bytes, Stack size 72 bytes, motionsimu.o(i._ZN16CMotionSimulator9SetParamsE17CMotionSimuParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CMotionSimulator::SetParams(CMotionSimuParams) &rArr; CFilterAcc2Angle::SetParams(double, double, double) &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLowPassFilter::SetParams(double)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::SetParams(double, double, double)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::SetParams(double, double, double, double)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::SetParams(double, double, double)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
</UL>

<P><STRONG><a name="[154]"></a>CMotionSimulator::CMotionSimulator()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, motionsimu.o(i._ZN16CMotionSimulatorC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMotionSimulator::CMotionSimulator() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLowPassFilter::SetParams(double)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[220]"></a>CMotionSimulator::CMotionSimulator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, motionsimu.o(i._ZN16CMotionSimulatorC1Ev), UNUSED)

<P><STRONG><a name="[177]"></a>CFilterAcc2Motion::Output(double)</STRONG> (Thumb, 370 bytes, Stack size 88 bytes, motionsimu.o(i._ZN17CFilterAcc2Motion6OutputEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CFilterAcc2Motion::Output(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::Output(double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::SingleMotionChannelCtrl(int, double, double)
</UL>

<P><STRONG><a name="[198]"></a>CFilterAcc2Motion::RealAcc()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motionsimu.o(i._ZN17CFilterAcc2Motion7RealAccEv))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
</UL>

<P><STRONG><a name="[15b]"></a>CFilterAcc2Motion::SetParams(double, double, double, double)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, motionsimu.o(i._ZN17CFilterAcc2Motion9SetParamsEdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CFilterAcc2Motion::SetParams(double, double, double, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::SetParams(CMotionSimuParams)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::SetParams(double, double, double)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::CStableCtrl()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[67]"></a>CFilterAcc2Motion::CFilterAcc2Motion()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, motionsimu.o(i._ZN17CFilterAcc2MotionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CFilterAcc2Motion::CFilterAcc2Motion() &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::CFilterAcc2Angle()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> motionsimu.o(i._ZN16CMotionSimulatorC1Ev)
<LI> stablectrl.o(i._ZN11CStableCtrlC1Ev)
</UL>
<P><STRONG><a name="[221]"></a>CFilterAcc2Motion::CFilterAcc2Motion__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, motionsimu.o(i._ZN17CFilterAcc2MotionC1Ev), UNUSED)

<P><STRONG><a name="[197]"></a>CFilterRSpd2Angle::Output(double)</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, motionsimu.o(i._ZN17CFilterRSpd2Angle6OutputEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CFilterRSpd2Angle::Output(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
</UL>

<P><STRONG><a name="[199]"></a>CFilterRSpd2Angle::RealSpd()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motionsimu.o(i._ZN17CFilterRSpd2Angle7RealSpdEv))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
</UL>

<P><STRONG><a name="[15c]"></a>CFilterRSpd2Angle::SetParams(double, double, double)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, motionsimu.o(i._ZN17CFilterRSpd2Angle9SetParamsEddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CFilterRSpd2Angle::SetParams(double, double, double) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::SetParams(CMotionSimuParams)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[69]"></a>CFilterRSpd2Angle::CFilterRSpd2Angle()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motionsimu.o(i._ZN17CFilterRSpd2AngleC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> motionsimu.o(i._ZN16CMotionSimulatorC1Ev)
</UL>
<P><STRONG><a name="[222]"></a>CFilterRSpd2Angle::CFilterRSpd2Angle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, motionsimu.o(i._ZN17CFilterRSpd2AngleC1Ev), UNUSED)

<P><STRONG><a name="[19a]"></a>CRobot::LimitServo(double)</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, robot.o(i._ZN6CRobot10LimitServoEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CRobot::LimitServo(double) &rArr; CRobot::Sigmoid(double) &rArr; exp &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::Sigmoid(double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
</UL>

<P><STRONG><a name="[132]"></a>CRobot::PlatformMove(double, double, double, double, double, double, bool)</STRONG> (Thumb, 278 bytes, Stack size 80 bytes, robot.o(i._ZN6CRobot12PlatformMoveEddddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = CRobot::PlatformMove(double, double, double, double, double, double, bool) &rArr; CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotIKP::Move(double, double, double, double, double, double)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::SetJackLength(int, double)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::LimitServo(double)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::SetJackServo(int, double)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectPosEurlarCtrl()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::MotionSimuCtrl()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::JuneBugCtrl()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::StableCtrl()
</UL>

<P><STRONG><a name="[136]"></a>CRobot::SetJackServo(int, double)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, robot.o(i._ZN6CRobot12SetJackServoEid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CRobot::SetJackServo(int, double) &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectJackCtrl()
</UL>

<P><STRONG><a name="[19d]"></a>CRobot::SetJackLength(int, double)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, robot.o(i._ZN6CRobot13SetJackLengthEid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRobot::SetJackLength(int, double) &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::InitStructureParams()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
</UL>

<P><STRONG><a name="[14e]"></a>CRobot::PlatformZeroed()</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, robot.o(i._ZN6CRobot14PlatformZeroedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CRobot::PlatformZeroed() &rArr; CRobot::PlatformMinHeight() &rArr; CRobot::CalcPlatformHeight(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyVector(double*, double, double, double)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMinHeight()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
</UL>

<P><STRONG><a name="[19f]"></a>CRobot::PlatformMinHeight()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, robot.o(i._ZN6CRobot17PlatformMinHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CRobot::PlatformMinHeight() &rArr; CRobot::CalcPlatformHeight(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformZeroed()
</UL>

<P><STRONG><a name="[1a0]"></a>CRobot::CalcPlatformHeight(double)</STRONG> (Thumb, 406 bytes, Stack size 104 bytes, robot.o(i._ZN6CRobot18CalcPlatformHeightEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CRobot::CalcPlatformHeight(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMinHeight()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::InitStructureParams()
</UL>

<P><STRONG><a name="[15a]"></a>CRobot::InitStructureParams()</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, robot.o(i._ZN6CRobot19InitStructureParamsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = CRobot::InitStructureParams() &rArr; CRobotBasic::SetStructureParams(double, double, double, double, double, double) &rArr; CRobotBasic::RotateAroundZ(double*, double*, double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyVector(double*, double, double, double)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::SetStructureParams(double, double, double, double, double, double)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::SetStructureErrors(double(*)[3], double(*)[3])
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::SetJackLength(int, double)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::CJuneBugCtrl()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[14f]"></a>CRobot::PosZ()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctrlsystem.o(i._ZN6CRobot4PosZEv))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
</UL>

<P><STRONG><a name="[19b]"></a>CRobot::Sigmoid(double)</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, robot.o(i._ZN6CRobot7SigmoidEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CRobot::Sigmoid(double) &rArr; exp &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::LimitServo(double)
</UL>

<P><STRONG><a name="[153]"></a>CRobot::CRobot()</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, robot.o(i._ZN6CRobotC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CRobot::CRobot() &rArr; CRobotFKP::CRobotFKP() &rArr; CRobotBasic::CRobotBasic() &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyVector(double*, double, double, double)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotFKP::CRobotFKP()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::CRobotBasic()
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::CJuneBugCtrl()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>

<P><STRONG><a name="[223]"></a>CRobot::CRobot__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, robot.o(i._ZN6CRobotC1Ev), UNUSED)

<P><STRONG><a name="[1a4]"></a>CRobotFKP::CRobotFKP()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, robotfkp.o(i._ZN9CRobotFKPC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CRobotFKP::CRobotFKP() &rArr; CRobotBasic::CRobotBasic() &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::CRobotBasic()
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CRobot()
</UL>

<P><STRONG><a name="[224]"></a>CRobotFKP::CRobotFKP__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, robotfkp.o(i._ZN9CRobotFKPC1Ev), UNUSED)

<P><STRONG><a name="[1a5]"></a>CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int)</STRONG> (Thumb, 86 bytes, Stack size 104 bytes, robotikp.o(i._ZN9CRobotIKP22CalcGlobalCoordinationEPdS0_PA3_dS2_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMatrixByEuler(double(*)[3], double*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixMultiVector(double*, double(*)[3], double*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorAddVector(double*, double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotIKP::Move(double, double, double, double, double, double)
</UL>

<P><STRONG><a name="[19c]"></a>CRobotIKP::Move(double, double, double, double, double, double)</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, robotikp.o(i._ZN9CRobotIKP4MoveEdddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CRobotIKP::Move(double, double, double, double, double, double) &rArr; CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int) &rArr; RotateMatrixByEuler(double(*)[3], double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyVector(double*, double, double, double)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::CalcJackLength(double*)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotIKP::CalcGlobalCoordination(double*, double*, double(*)[3], double(*)[3], int)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
</UL>

<P><STRONG><a name="[18a]"></a>std::sqrt(float)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, junebugctrl.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Length(float, float, float)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Length(float, float)
</UL>

<P><STRONG><a name="[c4]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::CMotionSimulator()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::CMotionTracker()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::CJuneBugCtrl()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::CStableCtrl()
</UL>

<P><STRONG><a name="[1a7]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1aa]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1ab]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1ac]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1ae]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1af]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1b0]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1b1]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1b2]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[1ad]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[bc]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[194]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::Output(double)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::SetParams(double, double, double)
</UL>

<P><STRONG><a name="[1a1]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
</UL>

<P><STRONG><a name="[10f]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMatrixByEuler(double(*)[3], double*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::RotateAroundZ(double*, double*, double)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::CRobotBasic()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
</UL>

<P><STRONG><a name="[1a3]"></a>exp</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, exp.o(i.exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = exp &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::Sigmoid(double)
</UL>

<P><STRONG><a name="[a3]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = main &rArr; HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a2]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
</UL>

<P><STRONG><a name="[10e]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMatrixByEuler(double(*)[3], double*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::RotateAroundZ(double*, double*, double)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::CRobotBasic()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::RealAcc()
</UL>

<P><STRONG><a name="[115]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance(double*, double*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1a6]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>

<P><STRONG><a name="[9c]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[66]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*, float*, float*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveByTrace()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Position(float)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxSpeed(float)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxAcc(float)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Speed(float)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float*, float*, float*, float*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformZeroed()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::NewDestination(float*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Initialize(double*, double*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetJackCtrlOrder(int&, float&, float&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetPosCtrlOrder(float&, float&, float&, float&, float&, float&)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetJuneBugOrder(float&, float&, float&, float&, float&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetAccCtrlOrder(float&, float&, float&, float&, float&, float&)
</UL>

<P><STRONG><a name="[1b8]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance(double*, double*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMatrixByEuler(double(*)[3], double*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixMultiVector(double*, double(*)[3], double*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorAddVector(double*, double*, double*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::Sigmoid(double)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::LimitServo(double)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::Output(double)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::Output(double)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLowPassFilter::Filter(double)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveByTrace()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Position(float)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxSpeed(float)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxAcc(float)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Speed(float)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::InitStructureParams()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::SetJackServo(int, double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::FdkRobotStatus(CCtrlSystem*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::RobotMove(CRobot&)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectPosEurlarCtrl()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectJackCtrl()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::JuneBugCtrl()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::StableCtrl()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputPulse(int, int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::FilterDestination(int, int)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[1bb]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1be]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[1c2]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMatrixByEuler(double(*)[3], double*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::RotateAroundZ(double*, double*, double)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::CRobotBasic()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::Sigmoid(double)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::Output(double)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::CFilterAcc2Motion()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::Output(double)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::Output(double)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxSpeed(float)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::SetParams(double, double, double)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::SetParams(double, double, double, double)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::SetParams(double, double, double)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::NewDestination(float*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputPulse(int, int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::FilterDestination(int, int)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[1c0]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformMove(double, double, double, double, double, double, bool)
</UL>

<P><STRONG><a name="[1c1]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::FdkRobotStatus(CCtrlSystem*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::RobotMove(CRobot&)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::FilterDestination(int, int)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1c3]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputPulse(int, int)
</UL>

<P><STRONG><a name="[1c4]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::CRobotBasic()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetJackCtrlOrder(int&, float&, float&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetPosCtrlOrder(float&, float&, float&, float&, float&, float&)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetJuneBugOrder(float&, float&, float&, float&, float&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetAccCtrlOrder(float&, float&, float&, float&, float&, float&)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::OutputPulse(int, int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::FilterDestination(int, int)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[225]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1a8]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[226]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[113]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit(double, double, double)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::LimitServo(double)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Refresh(float, float, float, float, float)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::FdkRobotStatus(CCtrlSystem*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[1c5]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1c8]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance(double*, double*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMatrixByEuler(double(*)[3], double*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixMultiVector(double*, double(*)[3], double*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::RotateAroundZ(double*, double*, double)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotBasic::CRobotBasic()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::Sigmoid(double)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::LimitServo(double)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::Output(double)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::Output(double)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::RealAcc()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::Output(double)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLowPassFilter::Filter(double)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Position(float)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxSpeed(float)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxAcc(float)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Speed(float)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Decay()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float*, float*, float*, float*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::InitStructureParams()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::SetParams(double, double, double, double)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::SetParams(double, double, double)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetJackCtrlOrder(int&, float&, float&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetPosCtrlOrder(float&, float&, float&, float&, float&, float&)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetJuneBugOrder(float&, float&, float&, float&, float&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::GetAccCtrlOrder(float&, float&, float&, float&, float&, float&)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::FdkRobotStatus(CCtrlSystem*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::RobotMove(CRobot&)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectJackCtrl()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::SingleChannelFwdBwdCtrl(int, double, double)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotServo::FilterDestination(int, int)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1c6]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ba]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[1bd]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit(double, double, double)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::LimitServo(double)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::Output(double)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::Output(double)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::Output(double)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*, float*, float*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveRequired()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxSpeed(float)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Max(double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float*, float*, float*, float*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Angle::SetParams(double, double, double)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::NewDestination(float*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectJackCtrl()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[1c7]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::Output(double)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::Output(double)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::SingleChannelFwdBwdCtrl(int, double, double)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1c9]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1b5]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance(double*, double*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateMatrixByEuler(double(*)[3], double*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::Sigmoid(double)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::CalcPlatformHeight(double)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::SetJackLength(int, double)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::LimitServo(double)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterRSpd2Angle::Output(double)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFilterAcc2Motion::Output(double)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHighPassFilter::Filter(double)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLowPassFilter::Filter(double)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::NewDestination(float*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobotCommPkg::FdkRobotStatus(CCtrlSystem*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectPosEurlarCtrl()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::OnCtrlModeChanged(int)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::MotionSimuCtrl()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectJackCtrl()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1cb]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*, float*, float*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveRequired()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::MoveByTrace()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Position(float)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxSpeed(float)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Refresh(float, float, float, float, float)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxAcc(float)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Speed(float)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float*, float*, float*, float*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRobot::PlatformZeroed()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionSimulator::SetParams(CMotionSimuParams)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::NewDestination(float*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStableCtrl::GetPlatformPosition(double&, double&, double&, double&, double&, double&)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ResetCtrl()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectPosEurlarCtrl()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::ExtractCtrlOrder()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::DirectJackCtrl()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::JuneBugCtrl()
</UL>

<P><STRONG><a name="[1cc]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Length(float, float, float)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Length(float, float)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Refresh(float, float, float, float, float)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float*, float*, float*, float*)
</UL>

<P><STRONG><a name="[1ce]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1d2]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Refresh(float, float, float, float, float)
</UL>

<P><STRONG><a name="[1d0]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
</UL>

<P><STRONG><a name="[1d1]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDown()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxSpeed(float)
</UL>

<P><STRONG><a name="[1d3]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1d6]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Length(float, float, float)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::Length(float, float)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleMovement(float*, float*, float*, float*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Refresh(float, float, float, float, float)
</UL>

<P><STRONG><a name="[1d4]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1cd]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>

<P><STRONG><a name="[1b9]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDownIdle()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::ScheduleXYMovement(float, float, float, float)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXYIdle()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveUpDown()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::MaxSpeed(float)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::Move(double*, double*)
</UL>

<P><STRONG><a name="[1d5]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
</UL>

<P><STRONG><a name="[1d7]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[1b6]"></a>_fsqrt</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, fsqrt.o(x$fpl$fsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::SearchForTheLargestXYStep(float, float, float, float)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJuneBugCtrl::StateMoveXY()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCubicTrace::Refresh(float, float, float, float, float)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMoveTrace::Schedule(float*, float*, float*, float*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMotionTracker::NewDestination(float*)
</UL>

<P><STRONG><a name="[1d9]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[7b]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[7f]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[1bf]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1a9]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1da]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10]"></a>initialize</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, fsmc.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsmc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>initialize</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, led.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>initialize</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, system_clock.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = initialize &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_clock.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>initialize_usart2</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.initialize_usart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = initialize_usart2 &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>initialize_usart3</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.initialize_usart3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = initialize_usart3 &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>my_printf2</STRONG> (Thumb, 46 bytes, Stack size 128 bytes, usart.o(i.my_printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = my_printf2 &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_string_to_usart2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>my_printf3</STRONG> (Thumb, 46 bytes, Stack size 128 bytes, usart.o(i.my_printf3))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = my_printf3 &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_string_to_usart3
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>send_string_to_usart2</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.send_string_to_usart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = send_string_to_usart2 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_printf2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>send_string_to_usart3</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.send_string_to_usart3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = send_string_to_usart3 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_printf3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>feed_dog</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wwdg.o(i.feed_dog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = feed_dog
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WWDG_Refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wwdg.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wwdg.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initialize &rArr; HAL_WWDG_Init &rArr; HAL_WWDG_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_WWDG_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wwdg.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>initialize</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, exti.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = initialize &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exti.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e2]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f2]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>UART_Receive_IT</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>UART_SetConfig</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f1]"></a>UART_Transmit_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[6f]"></a>__sti___13_CtrlBoard_cpp_7278497b</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ctrlboard.o(i.__sti___13_CtrlBoard_cpp_7278497b))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___13_CtrlBoard_cpp_7278497b &rArr; CCtrlBoard::CCtrlBoard() &rArr; CCtrlBoard::WriteFreqDivBase(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlBoard::CCtrlBoard()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlboard.o(.init_array)
</UL>
<P><STRONG><a name="[70]"></a>__sti___14_CtrlSystem_cpp_e608436e</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ctrlsystem.o(i.__sti___14_CtrlSystem_cpp_e608436e))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = __sti___14_CtrlSystem_cpp_e608436e &rArr; CCtrlSystem::CCtrlSystem() &rArr; CJuneBugCtrl::CJuneBugCtrl() &rArr; CRobot::InitStructureParams() &rArr; CRobotBasic::SetStructureParams(double, double, double, double, double, double) &rArr; CRobotBasic::RotateAroundZ(double*, double*, double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCtrlSystem::CCtrlSystem()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlsystem.o(.init_array)
</UL>
<P><STRONG><a name="[1ca]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1bc]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1d8]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[1cf]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[65]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
